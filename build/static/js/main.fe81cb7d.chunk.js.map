{"version":3,"sources":["utils/auth.js","components/Nav/index.js","pages/Home.js","utils/mutations.js","pages/Login.js","App.js","reportWebVitals.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Nav","className","to","role","Auth","loggedIn","href","onClick","logout","Home","LOGIN","gql","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","data","console","log","handleChange","target","name","value","onSubmit","htmlFor","placeholder","type","id","onChange","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","Form","Activity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe81cb7d.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) {\n                return true;\n            } else return false;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken);\n\n        window.location.assign('/');\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        // this will reload the page and reset the state of the application\n        window.location.assign('/');\n    }\n}\n\nexport default new AuthService();\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n    function showNavigation() {\n        if (Auth.loggedIn()) {\n            return (\n                <ul className=\"flex-row\">\n                    <li className=\"mx-1\">\n                        <Link to=\"/activity\">\n                            Your Activities\n            </Link>\n                    </li>\n                    <li className=\"mx-1\">\n                        <a href=\"/\" onClick={() => Auth.logout()}>\n                            Logout\n            </a>\n                    </li>\n                </ul>\n            );\n        } else {\n            return (\n                <ul className=\"flex-row\">\n                    <li className=\"mx-1\">\n                        <Link to=\"/login\">\n                            Login\n            </Link>\n                    </li>\n                </ul>\n            );\n        }\n    }\n\n    return (\n        <header className=\"flex-row px-1\">\n            <h1>\n                <Link to=\"/\">\n                    <span role=\"img\" aria-label=\"act-little\">üìù</span>\n          Activites for Little Ones\n        </Link>\n            </h1>\n\n            <nav>\n                {showNavigation()}\n            </nav>\n        </header>\n    );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport Activity from \"../components/Activity\";\nimport Form from \"../components/Form\";\nimport Nav from \"../components/Nav\";\n\nconst Home = () => {\n    return (\n        <div className=\"container\">\n            <Nav />\n            <Form />\n            <Activity />\n        </div>\n    );\n};\n\nexport default Home;","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\n// export const ADD_ACTIVITY = gql`\n//   mutation addOrder($products: [ID]!) {\n//     addOrder(products: $products) {\n//       purchaseDate\n//       products {\n//         _id\n//       name\n//       description\n//       price\n//       quantity\n//       category {\n//         name\n//       } \n//       }\n//     }\n//   }\n// `;\n\n//DO NOT NEED THIS SINCE WE DO NOT HAVE SIGNUP!\n\n// export const ADD_USER = gql`\n//   mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n//     addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n//       token\n//       user {\n//         _id\n//       }\n//     }\n//   }\n// `;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n    const [formState, setFormState] = useState({ email: '', password: '' })\n    const [login, { error }] = useMutation(LOGIN);\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n        try {\n            const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n            const token = mutationResponse.data.login.token;\n            Auth.login(token);\n        } catch (e) {\n            console.log(e)\n        }\n    };\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    return (\n        <div className=\"container my-1\">\n            <h2>Login</h2>\n            <form onSubmit={handleFormSubmit}>\n                <div className=\"flex-row space-between my-2\">\n                    <label htmlFor=\"email\">Email address:</label>\n                    <input\n                        placeholder=\"youremail@test.com\"\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"email\"\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className=\"flex-row space-between my-2\">\n                    <label htmlFor=\"pwd\">Password:</label>\n                    <input\n                        placeholder=\"******\"\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"pwd\"\n                        onChange={handleChange}\n                    />\n                </div>\n                {\n                    error ? <div>\n                        <p className=\"error-text\" >The provided credentials are incorrect</p>\n                    </div> : null\n                }\n                <div className=\"flex-row flex-end\">\n                    <button type=\"submit\">\n                        Submit\n          </button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\n\nexport default Login;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Form from \"./pages/Form\";\nimport Activity from \"./pages/Activity\";\nimport Login from \"./pages/Login\";\nimport Nav from \"./components/Nav\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n\n    // <p>\n    //   Hello Worrld!\n    // </p>\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\"\n              component={Home}\n            />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/form\" component={Form} />\n            <Route exact path=\"/activity\" component={Activity} />\n            {/* <Route exact path=\"/acitivites/:id\" component={Activity} /> */}\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}